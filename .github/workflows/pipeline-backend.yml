name: BSN Backend API Pipeline

on:
  push:
    branches:
      - main
    paths:
      - book-network/**
      - 'docker.compose.yml'
      - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: ubuntu-latest
    name: compile-project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile project
        run: |
          cd book-network
          ./mvnw clean compile

  
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit-tests
    env:
      EMAIL_HOSTNAME: ${{ secrets.EMAIL_HOSTNAME }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Set up environment variables
        run: |
            echo "EMAIL_HOSTNAME=$EMAIL_HOSTNAME" >> $GITHUB_ENV
            echo "EMAIL_USERNAME=$EMAIL_USERNAME" >> $GITHUB_ENV
            echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> $GITHUB_ENV

      - name: Running unit Tests
        run: |
          cd book-network
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend
        run: |
          cd book-network
          ./mvnw clean package
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend
        run: |
          cd book-network
          ./mvnw clean package

      - name: Extract Project Version
        id: extract_version
        run: |
          cd book-network
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and Push to dockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network
          file: book-network/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:{{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - name: Create Deployment Folder
        run: ssh ${{ secrets.SERVER_USERNAME }}@${{secrets.SERVER_IP}} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp docker-compose.yml ${{ secrets.SERVER_USERNAME }}@${{secrets.SERVER_IP}}:ci-cd/docker-compose.yml

      - name: Set Environment Variables and deploy
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} <<EOF
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }}
          export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q 
          docker-compose -f docker-compose.yml up -d
          EOF
